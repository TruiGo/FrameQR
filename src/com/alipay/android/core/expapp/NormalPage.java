package com.alipay.android.core.expapp;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import org.json.JSONException;import org.json.JSONObject;import android.app.Activity;import android.content.Context;import android.content.DialogInterface;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.ViewGroup.LayoutParams;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.LinearLayout;import android.widget.ScrollView;import android.widget.TextView;import com.alipay.android.appHall.CacheManager;import com.alipay.android.appHall.common.CacheSet;import com.alipay.android.appHall.common.Defines;import com.alipay.android.appHall.component.UIButton;import com.alipay.android.appHall.component.UICheckBox;import com.alipay.android.appHall.component.UISubTab;import com.alipay.android.appHall.uiengine.InputCheckListener;import com.alipay.android.appHall.uiengine.NeedSaveListener;import com.alipay.android.appHall.uiengine.PageHasNullInputChecker;import com.alipay.android.appHall.uiengine.SendLogListener;import com.alipay.android.appHall.uiengine.UIInterface;import com.alipay.android.client.AlipayApplication;import com.alipay.android.client.RootActivity;import com.alipay.android.client.constant.Constant;import com.alipay.android.core.expapp.api.Interpreter;import com.alipay.android.core.expapp.api.impl.ExpressionInterpreter;import com.alipay.android.log.AlipayLogAgent;import com.alipay.android.log.Constants;import com.alipay.android.log.StorageStateInfo;import com.alipay.android.util.JsonConvert;import com.alipay.android.util.LogUtil;import com.alipay.platform.core.Command;import com.alipay.platform.view.ActivityMediator;import com.alipay.platform.view.OnDataChangeListener;import com.eg.android.AlipayGphone.R;import com.google.zxing.client.BarcodeCaptureActivity;public class NormalPage implements Page {    private ExpAppRuntime mEngine;    private RootActivity mActivity;    public View mPage;    private OnClickListener mOnClickListener = new ButtonOnClickListener();    private NormalPageOnDataChangeListener mOnDataChangeListener = new NormalPageOnDataChangeListener();    private OnCheckedChangeListener mOnCheckedChangeListener = new CheckBoxOnCheckedChangeListener();    private ArrayList<UIInterface> mdelayGetValueGroup = new ArrayList<UIInterface>();    private ArrayList<InputCheckListener> mInputCheckList = new ArrayList<InputCheckListener>();    private ArrayList<NeedSaveListener> mNeedSaveList = new ArrayList<NeedSaveListener>();    private ArrayList<SendLogListener> mSendLogList = new ArrayList<SendLogListener>();    private PageHasNullInputChecker pageHasNullInputChecker = new PageHasNullInputChecker();    private String mPageName;    private String mPreAppearString;    private String mOnAppearString;    private String mOnRefresh;    private String mOnCancel;    private boolean mCancelCheckInput;    public RequestData mPendingRequestData;    public NormalPage(ExpAppRuntime engine) {        mEngine = engine;        mActivity = (RootActivity) engine.getContext();        mPage = (LinearLayout) LayoutInflater.from(mActivity).inflate(R.layout.normal_page,            null, false);    }        @Override    public void setPageTitle(final String pageTitle) {        TextView title = (TextView) mPage.findViewById(R.id.title_text);        title.setText(pageTitle);    }    @Override    public void addElement(final View child) {        if (child == null)            return;        NormalPage.this.getFormPanel().addView(child);    }    @Override    public ViewGroup getConfirmBar() {        return (ViewGroup) this.mPage.findViewById(R.id.confirmBar);    }    @Override    public View getView() {        return this.mPage;    }    public void setView(View view) {        mPage = view;    }    @Override    public ViewGroup getTitle() {        return (ViewGroup) this.mPage.findViewById(R.id.TitleLayout);    }    @Override    public ViewGroup getContent() {        View view = this.mPage.findViewById(R.id.scrollView);        if (view == null) {            view = this.mPage.findViewById(R.id.formPanel);            return (ViewGroup) view.getParent();        } else            return (ViewGroup) view;    }    @Override    public void addConfirmBarElement(final View child, LayoutParams params) {        if (child == null)            return;        NormalPage.this.getConfirmBar().addView(child, params);    }    @Override    public ViewGroup getFormPanel() {        return (ViewGroup) this.mPage.findViewById(R.id.formPanel);    }    @Override    public OnClickListener getOnClickListener() {        return this.mOnClickListener;    }    class ButtonOnClickListener implements View.OnClickListener {        public void onClick(View view) {            String monitor = ((UIButton) view).getMonitor();            if (!(monitor.equals("") || monitor.equals("false"))) {               /* StorageStateInfo storageStateInfo = StorageStateInfo.getInstance();                AlipayLogAgent.onEvent(                    mEngine.getContext(),                    Constants.MONITORPOINT_EVENT_BUTTONCLICKED, //                    "", // memo                    mPageName, // viewID                    storageStateInfo.getValue(Constants.STORAGE_APPID),                    storageStateInfo.getValue(Constants.STORAGE_APPVERSION),                    storageStateInfo.getValue(Constants.STORAGE_PRODUCTID), mActivity.getUserId(),                    //						Constant.STR_USERID,                    storageStateInfo.getValue(Constants.STORAGE_PRODUCTVERSION),                    storageStateInfo.getValue(Constants.STORAGE_CLIENTID));// productVersion*/            }            if (((UIButton) view).getButtonType() != null                && ((UIButton) view).getButtonType().equals(AppUiElementType.buttonClass)) {                for (InputCheckListener listener : NormalPage.this.mInputCheckList) {                    boolean isRight = listener.inputCheck();                    if (!isRight) {                        return;                    }                }            }            for (SendLogListener listener : NormalPage.this.mSendLogList) {                listener.sendLog();            }            UIButton button = (UIButton) view;            String exp = button.getExpression();            if (exp != null && exp.length() > 0) {                Object id = button.getTag() == null ? "" : button.getTag();                interpreter("Button::" + id.toString(), button.getExpression());            }        }    }    @Override    public OnDataChangeListener getOnDataChangeListener() {        return mOnDataChangeListener;    }    class NormalPageOnDataChangeListener implements OnDataChangeListener {        private String mRuleId;        @Override        public Context getContext() {            return mEngine.getContext();        }        @Override        public void onCancel(Command arg0) {        }        @SuppressWarnings("unchecked")        @Override        public void onComplete(Command command) {            AlipayApplication application = (AlipayApplication) mEngine.getContext().getApplicationContext();            application.closeProgress();                        if (Constants.parserQR) {            	Constants.parserQR = false;            	Constants.paipaiStep3End = System.currentTimeMillis();            	long paipaiTimeBlock3 = Constants.paipaiStep3End - Constants.paipaiStep3Start;            	AlipayLogAgent.writeLog(mEngine.getContext(),            			Constants.BehaviourID.MONITOR, "paipai", null,        				null, null, null,        				null, null, "android",CacheSet.getInstance(mEngine.getContext()).getString(Constant.CHANNELS),"interactCode",paipaiTimeBlock3+"");			}            //            HashMap<String, Object> hmResponse = (HashMap<String, Object>) command                .getResponseData();            mEngine.getResponsDataHM().put(command.getmId(), hmResponse);            String resultStatus = hmResponse.get(Defines.resultStatus).toString();            // Execute expression from server            try {                if (hmResponse.containsKey("strings")) {// strings                    JSONObject jsonObject = new JSONObject((String) hmResponse.get("strings"));                    Iterator<?> iterator = jsonObject.keys();                    while (iterator.hasNext()) {                        String name = iterator.next().toString();                        String val = jsonObject.opt(name).toString();                        mEngine.addValue(name, val);                    }                }                if (hmResponse.containsKey("rules")) {// rules                    JSONObject jsonObject = new JSONObject((String) hmResponse.get("rules"));                    Iterator<?> iterator = jsonObject.keys();                    while (iterator.hasNext()) {                        String name = iterator.next().toString();                        String val = jsonObject.opt(name).toString();                        mEngine.addRule(name, val);                    }                }                if (hmResponse.containsKey("expressions")) {// expressions                    JSONObject jsonObject = new JSONObject((String) hmResponse.get("expressions"));                    Iterator<?> iterator = jsonObject.keys();                    while (iterator.hasNext()) {                        String name = iterator.next().toString();                        String val = jsonObject.opt(name).toString();                        mEngine.addValue(name, val);                    }                }                if (hmResponse.containsKey("expression")) {                    interpreter("Exp-From-Server", hmResponse.get("expression").toString());                    return;                }            } catch (Exception e) {                e.printStackTrace();            }            // �??�??            if (resultStatus.equals(Defines.SESSION_INVALID)) {                mActivity.logoutUser();                mEngine.login(null);            } else {                // Execute the corresponding rules.                String rule = mEngine.getRule(mRuleId);                if (rule != null && rule.length() > 0)                    processRule(mRuleId, rule, resultStatus);                // Save data                if (resultStatus.equals("100")) {                    CacheManager cm = CacheManager.getInstance(mEngine.getContext());                    for (int i = 0; i < mNeedSaveList.size(); i++) {                        mNeedSaveList.get(i).doSave(cm);                    }                }            }        }        @Override        public void onFail(Command command) {            AlipayApplication application = (AlipayApplication) mEngine.getContext().getApplicationContext();            application.closeProgress();            String content = command.getResponseMessage();            if (content == null)                content = mEngine.getContext().getString(R.string.CheckNetwork);            mEngine.showAlert(2, content, null, null, null);        }        @Override        public boolean preCancel(Command arg0) {            return false;        }        @Override        public boolean preFail(Command arg0) {            return false;        }        @Override        public void setRuleId(String ruleId) {            mRuleId = ruleId;        }        @Override        public String getRuleId() {            return mRuleId;        }    }    class CheckBoxOnCheckedChangeListener implements OnCheckedChangeListener {        @Override        public void onCheckedChanged(CompoundButton view, boolean isChecked) {            UICheckBox checkBox = (UICheckBox) view;            String expression = checkBox.getExpression();            if (expression != null && expression.length() > 0) {                Object id = checkBox.getTag() == null ? "" : checkBox.getTag();                interpreter("checkBox::" + id.toString(), expression);            }        }    }    @Override    public void setPageName(String pageName) {        this.mPageName = pageName;    }    @Override    public String getPageName() {        return mPageName;    }    @Override    public void add2delayGetValueGroup(UIInterface view) {        mdelayGetValueGroup.add(view);    }    @Override    public void addInputCheckListener(InputCheckListener listener) {        mInputCheckList.add(listener);    };    @Override    public void addSendLogListener(SendLogListener listener) {        mSendLogList.add(listener);    }    @Override    public void addNeedSaveListener(NeedSaveListener listener) {        mNeedSaveList.add(listener);    }    @Override    public void setPreAppear(String value) {        mPreAppearString = value;    }    @Override    public void setOnAppearString(String value) {        this.mOnAppearString = value;    }    @Override    public void setOnCancel(String value) {        mOnCancel = value;    }    @Override    public void onCancel() {        if (mOnCancel != null && mOnCancel.length() > 0 && !mOnCancel.equals("default")) {            interpreter(mPageName + "::Page-cancel", mOnCancel);        } else {            if (mCancelCheckInput && formInputed()) {                mActivity.getDataHelper().showDialog((Activity) getRawContext(),                    R.drawable.infoicon,                    mEngine.getContext().getResources().getString(R.string.WarngingString),                    mEngine.getContext().getResources().getString(R.string.give_up_input),                    mEngine.getContext().getResources().getString(R.string.Ensure),                    new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            pop2PreviousPage();                        }                    }, mEngine.getContext().getResources().getString(R.string.Cancel),                    new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            dialog.dismiss();                        }                    }, null, null);            } else                pop2PreviousPage();        }    }    @Override    public boolean isCancelCheckInput() {        return mCancelCheckInput;    }    private void pop2PreviousPage() {        mEngine.pop(1);    }    @Override    public void setCancelCheckInput(boolean cancelCheckInput) {        mCancelCheckInput = cancelCheckInput;    }    @Override    public void setOnRefresh(String value) {        this.mOnRefresh = value;    }    @Override    public void onRefresh() {        if (mOnRefresh != null && mOnRefresh.length() > 0 && !mOnRefresh.equals("default")) {            interpreter(mPageName + "::Page-refresh", mOnRefresh);        }        // Avoid the input soft panel to be always hidden.        if (this.getFormPanel() != null) {            View focus = this.getFormPanel().getFocusedChild();            if (focus != null) {                focus.clearFocus();                // focus.setSelected(true);            }        }        StorageStateInfo.getInstance().putValue(Constants.STORAGE_CURRENTVIEWID, mPageName);    }    @Override    public void preAppear() {        // ???件�?�?���??????��?        CacheManager cm = CacheManager.getInstance(mEngine.getContext());        for (int i = 0; i < mNeedSaveList.size(); i++) {            mNeedSaveList.get(i).setDefault(cm);        }        // execute the onAppear expression string(mark as mOnAppearString).        if (mPreAppearString != null && mPreAppearString.length() > 0            && !mPreAppearString.equals("default")) {            interpreter(mPageName + "::Page-preappear", mPreAppearString);        }    }    @Override    public void onAppear() {        // execute the onAppear expression string(mark as mOnAppearString).        if (mOnAppearString != null && mOnAppearString.length() > 0            && !mOnAppearString.equals("default")) {            interpreter(mPageName + "::Page-appear", mOnAppearString);        }    }    @Override    public OnCheckedChangeListener getOnCheckedChangeListener() {        return this.mOnCheckedChangeListener;    }    @Override    public ExpAppRuntime getEngine() {        return mEngine;    }    @Override    public android.content.Context getRawContext() {        return mEngine.getContext();    }    @Override    public Object interpreter(String id, String expression) {        Object object = null;        if (expression != null && expression.length() > 0) {            Interpreter interpreter = new ExpressionInterpreter(this);            object = interpreter.excute(id, expression);        }        return object;    }    @Override    public void processRule(String rId, String rule, String operand) {        try {            HashMap<String, Object> map = JsonConvert.Json2Map(new JSONObject(rule));            String value = null;            if (map.containsKey(operand)) {                value = (String) map.get(operand);            } else if (map.containsKey("*")) {                value = (String) map.get("*");            }            if (value.startsWith(AppUiElementType.Reference))                value = mEngine.getExp(value.replace(AppUiElementType.Reference, ""));            interpreter(rId, value);        } catch (JSONException e) {            LogUtil.logContainerDebuggable(Interpreter.TAG,                "Rule id=" + rId + " Encountered Exception:" + e.getMessage());            e.printStackTrace();        }    }    @Override    public void requestData(final String interfaceId, final String ruleId, String action,                            final ArrayList<String> params) {        if (mEngine.getRequestMaker().relAccount(interfaceId) && !mEngine.login(null)) {            mPendingRequestData = new RequestData(interfaceId, ruleId, params);            return;        }        String sessionId = mActivity.getSessionId();        mOnDataChangeListener.setRuleId(ruleId);        ActivityMediator activityMediator = new ActivityMediator(mOnDataChangeListener);        params.add(sessionId);        params.add(mActivity.getConfigData().getClientId());        activityMediator.sendCommand(interfaceId, action, mEngine.getRequestMaker(), params);        AlipayApplication application = (AlipayApplication) mEngine.getContext().getApplicationContext();        application.showProgress();    }    @Override    public Object response_get(String dataId, String key) {        Object value = null;        try {            HashMap<String, Object> hm = mEngine.getResponsDataHM().get(dataId);            value = hm.get(key);        } catch (Exception e) {            e.printStackTrace();        }        return value;    }    @Override    public Object findWidget(String viewId) {        return mPage.findViewWithTag(viewId);    }    public class RequestData {        public RequestData(String interfaceId, String ruleId, ArrayList<String> params) {            this.interfaceId = interfaceId;            this.ruleId = ruleId;            this.params = params;        }        public String interfaceId;        public String ruleId;        public ArrayList<String> params;    }    @Override    public void setScrollBarEnabled(boolean enable) {        if (!enable) {            ScrollView scrollView = (ScrollView) this.mPage.findViewById(R.id.scrollView);            View childOfScrollView = scrollView.getChildAt(0);            scrollView.removeView(childOfScrollView);            ViewGroup parent = (ViewGroup) scrollView.getParent();            parent.removeView(scrollView);            parent.addView(childOfScrollView);        } else {            // Not implements now.        }    }    public boolean formInputed() {        for (InputCheckListener listener : NormalPage.this.mInputCheckList) {            if (listener.Inputed()) {                return true;            }        }        return false;    }    @Override    public String getRealPageName() {        View view = getFormPanel().getChildAt(0);        if (view instanceof UISubTab) {            return ((UISubTab) view).getCurrentPage().getPageName();        }        return getPageName();    }    @Override    public PageHasNullInputChecker getInputBoxIsNullListener() {        return pageHasNullInputChecker;    }}